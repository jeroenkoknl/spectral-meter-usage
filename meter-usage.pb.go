// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meter-usage.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Measurement struct {
	Timestamp            int32    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metervalue           int32    `protobuf:"varint,2,opt,name=metervalue,proto3" json:"metervalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Measurement) Reset()         { *m = Measurement{} }
func (m *Measurement) String() string { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()    {}
func (*Measurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59390e8ce76c506, []int{0}
}

func (m *Measurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measurement.Unmarshal(m, b)
}
func (m *Measurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measurement.Marshal(b, m, deterministic)
}
func (m *Measurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measurement.Merge(m, src)
}
func (m *Measurement) XXX_Size() int {
	return xxx_messageInfo_Measurement.Size(m)
}
func (m *Measurement) XXX_DiscardUnknown() {
	xxx_messageInfo_Measurement.DiscardUnknown(m)
}

var xxx_messageInfo_Measurement proto.InternalMessageInfo

func (m *Measurement) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Measurement) GetMetervalue() int32 {
	if m != nil {
		return m.Metervalue
	}
	return 0
}

type GetMeasurementsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMeasurementsRequest) Reset()         { *m = GetMeasurementsRequest{} }
func (m *GetMeasurementsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMeasurementsRequest) ProtoMessage()    {}
func (*GetMeasurementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a59390e8ce76c506, []int{1}
}

func (m *GetMeasurementsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMeasurementsRequest.Unmarshal(m, b)
}
func (m *GetMeasurementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMeasurementsRequest.Marshal(b, m, deterministic)
}
func (m *GetMeasurementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMeasurementsRequest.Merge(m, src)
}
func (m *GetMeasurementsRequest) XXX_Size() int {
	return xxx_messageInfo_GetMeasurementsRequest.Size(m)
}
func (m *GetMeasurementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMeasurementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMeasurementsRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Measurement)(nil), "main.Measurement")
	proto.RegisterType((*GetMeasurementsRequest)(nil), "main.GetMeasurementsRequest")
}

func init() { proto.RegisterFile("meter-usage.proto", fileDescriptor_a59390e8ce76c506) }

var fileDescriptor_a59390e8ce76c506 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0x2d, 0x49,
	0x2d, 0xd2, 0x2d, 0x2d, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9,
	0x4d, 0xcc, 0xcc, 0x53, 0xf2, 0xe6, 0xe2, 0xf6, 0x4d, 0x4d, 0x2c, 0x2e, 0x2d, 0x4a, 0xcd, 0x4d,
	0xcd, 0x2b, 0x11, 0x92, 0xe1, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x42, 0x08, 0x08, 0xc9, 0x71, 0x71, 0x81, 0xcd, 0x29, 0x4b,
	0xcc, 0x29, 0x4d, 0x95, 0x60, 0x02, 0x4b, 0x23, 0x89, 0x28, 0x49, 0x70, 0x89, 0xb9, 0xa7, 0x96,
	0x20, 0x99, 0x57, 0x1c, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x62, 0x14, 0xc2, 0xc5, 0xe5, 0x0b,
	0x52, 0x17, 0x0a, 0x72, 0x80, 0x90, 0x1b, 0x17, 0x3f, 0x9a, 0x3a, 0x21, 0x19, 0x3d, 0x90, 0x73,
	0xf4, 0xb0, 0x6b, 0x97, 0x12, 0x84, 0xc8, 0x22, 0x49, 0x29, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81,
	0x7d, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x57, 0x87, 0x66, 0x18, 0xde, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeterUsageClient is the client API for MeterUsage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeterUsageClient interface {
	GetMeasurements(ctx context.Context, in *GetMeasurementsRequest, opts ...grpc.CallOption) (MeterUsage_GetMeasurementsClient, error)
}

type meterUsageClient struct {
	cc *grpc.ClientConn
}

func NewMeterUsageClient(cc *grpc.ClientConn) MeterUsageClient {
	return &meterUsageClient{cc}
}

func (c *meterUsageClient) GetMeasurements(ctx context.Context, in *GetMeasurementsRequest, opts ...grpc.CallOption) (MeterUsage_GetMeasurementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeterUsage_serviceDesc.Streams[0], "/main.MeterUsage/GetMeasurements", opts...)
	if err != nil {
		return nil, err
	}
	x := &meterUsageGetMeasurementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeterUsage_GetMeasurementsClient interface {
	Recv() (*Measurement, error)
	grpc.ClientStream
}

type meterUsageGetMeasurementsClient struct {
	grpc.ClientStream
}

func (x *meterUsageGetMeasurementsClient) Recv() (*Measurement, error) {
	m := new(Measurement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeterUsageServer is the server API for MeterUsage service.
type MeterUsageServer interface {
	GetMeasurements(*GetMeasurementsRequest, MeterUsage_GetMeasurementsServer) error
}

// UnimplementedMeterUsageServer can be embedded to have forward compatible implementations.
type UnimplementedMeterUsageServer struct {
}

func (*UnimplementedMeterUsageServer) GetMeasurements(req *GetMeasurementsRequest, srv MeterUsage_GetMeasurementsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}

func RegisterMeterUsageServer(s *grpc.Server, srv MeterUsageServer) {
	s.RegisterService(&_MeterUsage_serviceDesc, srv)
}

func _MeterUsage_GetMeasurements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMeasurementsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeterUsageServer).GetMeasurements(m, &meterUsageGetMeasurementsServer{stream})
}

type MeterUsage_GetMeasurementsServer interface {
	Send(*Measurement) error
	grpc.ServerStream
}

type meterUsageGetMeasurementsServer struct {
	grpc.ServerStream
}

func (x *meterUsageGetMeasurementsServer) Send(m *Measurement) error {
	return x.ServerStream.SendMsg(m)
}

var _MeterUsage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.MeterUsage",
	HandlerType: (*MeterUsageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMeasurements",
			Handler:       _MeterUsage_GetMeasurements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meter-usage.proto",
}
